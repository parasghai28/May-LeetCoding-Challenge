#Solution 1- Hashmap (Slow) 
class Solution {
    public int majorityElement(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<Integer, Integer>();
        for(int i = 0 ; i < nums.length; i++) {
            if(map.containsKey(nums[i])) {
                map.put(nums[i], map.get(nums[i]) + 1);
            } else {
                map.put(nums[i], 1);
            }
        }
        
        for(Map.Entry<Integer, Integer> entry : map.entrySet()){
            if(entry.getValue() > nums.length/2) {
                return entry.getKey();
            }
        }
        return -1;
    }
}

#Solution 2 - Faster and logical, n/2 index will have majority element as it is said it exits and have more than n/2 majority
class Solution {
    public int majorityElement(int[] nums) {
     Arrays.sort(nums);
        return nums[nums.length/2];
    }
}

#Solution 3 - Moore Voting Algorithm O(n) solution
